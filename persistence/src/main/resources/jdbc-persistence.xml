<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation=" http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

    <bean id="saveSql" class="java.lang.String">
        <constructor-arg>
            <value>
                MERGE INTO Q_USER
                USING DUAL ON (ACCOUNT_ID = :accountId)
                WHEN MATCHED THEN
                UPDATE SET NAME = :name,
                EMAIL = :email,
                IS_ENABLED = :isEnabled,
                SURNAME = :surname,
                USERNAME = :username,
                LANG_ID = :language,
                BIRTHDAY = :birthday,
                THEME = :theme,
                AVATAR = :avatar,
                UPDATED_BY = :updatedBy,
                UPDATED_DATE = :updatedDate
                WHEN NOT MATCHED THEN
                INSERT (ACCOUNT_ID, NAME, EMAIL, PASSWORD, BIRTHDAY, IS_ENABLED, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE)
                VALUES (:accountId, :name, :email, :password, :birthday, :isEnabled, :createdBy, :createdDate, :updatedBy, :updatedDate)
            </value>
        </constructor-arg>
    </bean>

    <bean id="saveNoAvatarSql" class="java.lang.String">
        <constructor-arg>
            <value>
                MERGE INTO Q_USER
                USING DUAL ON (ACCOUNT_ID = :accountId)
                WHEN MATCHED THEN
                UPDATE SET NAME = :name,
                EMAIL = :email,
                IS_ENABLED = :isEnabled,
                SURNAME = :surname,
                USERNAME = :username,
                LANG_ID = :language,
                BIRTHDAY = :birthday,
                THEME = :theme,
                UPDATED_BY = :updatedBy,
                UPDATED_DATE = :updatedDate
                WHEN NOT MATCHED THEN
                INSERT (ACCOUNT_ID, NAME, EMAIL, PASSWORD, BIRTHDAY, IS_ENABLED, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE)
                VALUES (:accountId, :name, :email, :password, :birthday, :isEnabled, :createdBy, :createdDate, :updatedBy, :updatedDate)
            </value>
        </constructor-arg>
    </bean>

    <bean id="saveUserRolesSql" class="java.lang.String">
        <constructor-arg>
            <value>
                <![CDATA[
                     INSERT INTO Q_USER_ROLES(ACCOUNT_ID, ROLE_ID) VALUES (:accountId, :roleId)
                ]]>
            </value>
        </constructor-arg>
    </bean>

    <bean id="saveFavoriteCategorySql" class="java.lang.String">
        <constructor-arg>
            <value>
                MERGE INTO Q_USER_CATEGORY
                USING DUAL ON (ACCOUNT_ID = :accountId AND CAT_ID = :catId)
                WHEN NOT MATCHED THEN
                INSERT (ACCOUNT_ID, CAT_ID) VALUES (:accountId, :catId)
            </value>
        </constructor-arg>
    </bean>

    <bean id="saveUserOccupationSql" class="java.lang.String">
        <constructor-arg>
            <value>
                MERGE INTO Q_USER_OCCUPATION
                USING DUAL ON (ACCOUNT_ID = :accountId AND OCCUPATION_ID = :occupationId)
                WHEN NOT MATCHED THEN
                INSERT (ACCOUNT_ID, OCCUPATION_ID) VALUES (:accountId, :occupationId)
            </value>
        </constructor-arg>
    </bean>

    <bean id="updateUserPasswordSql" class="java.lang.String">
        <constructor-arg>
            <value>
                <![CDATA[
                     UPDATE Q_USER SET password = :password WHERE email = :email
                ]]>
            </value>
        </constructor-arg>
    </bean>

    <bean id="userSequenceNextVal" class="java.lang.String">
        <constructor-arg>
            <value>
                <![CDATA[
                     SELECT USERS_SEQ.nextval FROM DUAL
                ]]>
            </value>
        </constructor-arg>
    </bean>

    <bean id="findByEmailSql" class="java.lang.String">
        <constructor-arg>
            <value>
                <![CDATA[
                     SELECT
                         u.account_id
                        ,u.email
                        ,u.password
                        ,u.is_enabled
                        ,u.birthday
                        ,u.name
                        ,u.surname
                        ,u.theme
                        ,u.username
                        ,u.avatar
                        ,u.created_date
                        ,u.updated_date
                        ,l.lang_id
                        ,l.name as lang_name
                        ,l.lang_code
                     FROM Q_USER u
                     LEFT JOIN Q_LANGUAGE l ON l.lang_id = u.lang_id
                     WHERE u.email = :email
                ]]>
            </value>
        </constructor-arg>
    </bean>

    <bean id="findUserRolesSql" class="java.lang.String">
        <constructor-arg>
            <value>
                <![CDATA[
                     SELECT
                         r.role_id
                        ,r.name
                     FROM Q_ROLE r
                     LEFT JOIN Q_USER_ROLES ur ON r.role_id = ur.role_id
                     WHERE ur.account_id = :accountId
                ]]>
            </value>
        </constructor-arg>
    </bean>

    <bean id="findUserFavoriteCategoriesSql" class="java.lang.String">
        <constructor-arg>
            <value>
                <![CDATA[
                     SELECT
                         c.cat_id
                        ,c.name
                     FROM Q_CATEGORY c
                     LEFT JOIN Q_USER_CATEGORY uc ON c.cat_id = uc.cat_id
                     WHERE uc.account_id = :accountId
                ]]>
            </value>
        </constructor-arg>
    </bean>

    <bean id="findUserOccupationsSql" class="java.lang.String">
        <constructor-arg>
            <value>
                <![CDATA[
                     SELECT
                         o.id
                        ,o.name
                        ,o.domain
                        ,o.status
                     FROM Q_OCCUPATION o
                     LEFT JOIN Q_USER_OCCUPATION uo ON o.id = uo.occupation_id
                     WHERE uo.account_id = :accountId
                ]]>
            </value>
        </constructor-arg>
    </bean>

    <bean id="findAllSql" class="java.lang.String">
        <constructor-arg>
            <value>
                <![CDATA[
                     SELECT
                         u.account_id
                        ,u.email
                        ,u.password
                        ,u.is_enabled
                        ,u.birthday
                        ,u.name
                        ,r.role_id
                        ,r.name as ROLE_NAME
                     FROM Q_USER u
                     LEFT JOIN Q_USER_ROLES ur ON u.account_id = ur.account_id
                     LEFT JOIN Q_ROLE r ON ur.role_id = r.role_id
                ]]>
            </value>
        </constructor-arg>
    </bean>

    <bean id="deleteFavoriteCategoriesSql" class="java.lang.String">
        <constructor-arg>
            <value>
                <![CDATA[
                     DELETE FROM Q_USER_CATEGORY WHERE ACCOUNT_ID = :accountId AND CAT_ID in (:ids)
                ]]>
            </value>
        </constructor-arg>
    </bean>

    <bean id="deleteUserOccupationsSql" class="java.lang.String">
        <constructor-arg>
            <value>
                <![CDATA[
                     DELETE FROM Q_USER_OCCUPATION WHERE ACCOUNT_ID = :accountId AND OCCUPATION_ID in (:ids)
                ]]>
            </value>
        </constructor-arg>
    </bean>

    <bean id="activateAccountSql" class="java.lang.String">
        <constructor-arg>
            <value>
                <![CDATA[
                     UPDATE Q_USER SET IS_ENABLED = 1 WHERE ACCOUNT_ID = :accountId
                ]]>
            </value>
        </constructor-arg>
    </bean>

</beans>
